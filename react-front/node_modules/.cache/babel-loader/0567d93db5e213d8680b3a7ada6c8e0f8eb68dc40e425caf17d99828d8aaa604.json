{"ast":null,"code":"var _jsxFileName = \"/private/var/www/html/dev-app/live-stream-talk/react-front/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Lottie from \"lottie-react\";\nimport talkingAvatar from \"./talking-avatar.json\";\nimport { GoogleGenAI } from \"@google/genai\";\n\n// Official Live model id (note the `models/` prefix in docs)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MODEL = \"models/gemini-live-2.5-flash-preview\"; // half-cascaded audio model\n\n// Model → you: 24 kHz PCM\nconst OUTPUT_SAMPLE_RATE = 24000;\n// You → model: 16 kHz PCM\nconst INPUT_SAMPLE_RATE = 16000;\n\n// Token server\nconst TOKEN_BASE = process.env.REACT_APP_TOKEN_BASE || \"http://localhost:8787\";\nconst TOKEN_URL = `${TOKEN_BASE}/api/ephemeral-token`;\nexport default function App() {\n  _s();\n  const avatarRef = useRef(null);\n\n  // live session\n  const [session, setSession] = useState(null);\n\n  // flags + refs\n  const wsOpenRef = useRef(false);\n  const sendEnabledRef = useRef(false); // only true while WS OPEN\n  const lastSendTsRef = useRef(0); // for keepalive\n  const keepAliveTimerRef = useRef(null);\n\n  // mic + audio contexts\n  const micStreamRef = useRef(null);\n  const inputCtxRef = useRef(null);\n  const outputCtxRef = useRef(null);\n  const processorRef = useRef(null);\n\n  // playback queue\n  const playQueueRef = useRef([]);\n  const drainingRef = useRef(false);\n\n  // UI\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [log, setLog] = useState([]);\n  const [textInput, setTextInput] = useState(\"\");\n\n  // avatar follow speaking\n  useEffect(() => {\n    if (!avatarRef.current) return;\n    isSpeaking ? avatarRef.current.play() : avatarRef.current.stop();\n  }, [isSpeaking]);\n\n  // ---------- helpers ----------\n  const nowHHMMSS = () => {\n    const d = new Date();\n    const pad = n => String(n).padStart(2, \"0\");\n    return `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;\n  };\n  const addLog = (role, text) => setLog(prev => [...prev, {\n    time: nowHHMMSS(),\n    role,\n    text\n  }]);\n\n  // Float32 → Int16\n  const floatTo16BitPCM = float32 => {\n    const out = new Int16Array(float32.length);\n    for (let i = 0; i < float32.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32[i]));\n      out[i] = s < 0 ? s * 0x8000 : s * 0x7fff;\n    }\n    return out;\n  };\n\n  // downsample to 16k\n  const downsampleTo16k = (float32, inRate) => {\n    if (inRate === INPUT_SAMPLE_RATE) return float32;\n    const ratio = inRate / INPUT_SAMPLE_RATE;\n    const newLen = Math.floor(float32.length / ratio);\n    const out = new Float32Array(newLen);\n    let pos = 0;\n    for (let i = 0; i < newLen; i++, pos += ratio) out[i] = float32[Math.floor(pos)];\n    return out;\n  };\n\n  // ArrayBuffer <-> base64\n  const arrayBufferToBase64 = ab => {\n    const bytes = new Uint8Array(ab);\n    let bin = \"\";\n    for (let i = 0; i < bytes.length; i++) bin += String.fromCharCode(bytes[i]);\n    return btoa(bin);\n  };\n  const base64ToInt16 = b64 => {\n    const bytes = Uint8Array.from(atob(b64), c => c.charCodeAt(0));\n    return new Int16Array(bytes.buffer);\n  };\n\n  // ---------- playback (strict FIFO @24k) ----------\n  async function enqueuePlayback(chunk) {\n    let int16;\n    if (typeof chunk === \"string\") int16 = base64ToInt16(chunk);else if (chunk instanceof ArrayBuffer) int16 = new Int16Array(chunk);else return;\n    playQueueRef.current.push(int16);\n    if (!drainingRef.current) drainPlayback();\n  }\n  async function drainPlayback() {\n    drainingRef.current = true;\n    const ctx = outputCtxRef.current || new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: OUTPUT_SAMPLE_RATE\n    });\n    if (!outputCtxRef.current) outputCtxRef.current = ctx;\n    while (playQueueRef.current.length) {\n      const int16 = playQueueRef.current.shift();\n      const f32 = new Float32Array(int16.length);\n      for (let i = 0; i < int16.length; i++) f32[i] = int16[i] / 0x8000;\n      const buf = ctx.createBuffer(1, f32.length, OUTPUT_SAMPLE_RATE);\n      buf.copyToChannel(f32, 0);\n      await new Promise(resolve => {\n        const src = ctx.createBufferSource();\n        src.buffer = buf;\n        src.connect(ctx.destination);\n        setIsSpeaking(true);\n        src.start();\n        src.onended = () => {\n          setIsSpeaking(false);\n          resolve();\n        };\n      });\n    }\n    drainingRef.current = false;\n  }\n\n  // extract AI text from messages (varies across preview builds)\n  function extractMessageText(msg) {\n    var _sc$modelTurn;\n    if (typeof (msg === null || msg === void 0 ? void 0 : msg.text) === \"string\" && msg.text.trim()) return msg.text.trim();\n    const sc = msg === null || msg === void 0 ? void 0 : msg.serverContent;\n    if (sc !== null && sc !== void 0 && sc.output && Array.isArray(sc.output)) {\n      const t = sc.output.map(o => o === null || o === void 0 ? void 0 : o.text).filter(Boolean).join(\" \").trim();\n      if (t) return t;\n    }\n    if (sc !== null && sc !== void 0 && (_sc$modelTurn = sc.modelTurn) !== null && _sc$modelTurn !== void 0 && _sc$modelTurn.parts) {\n      const t = sc.modelTurn.parts.map(p => typeof (p === null || p === void 0 ? void 0 : p.text) === \"string\" ? p.text : \"\").join(\" \").trim();\n      if (t) return t;\n    }\n    if (Array.isArray(msg === null || msg === void 0 ? void 0 : msg.candidates)) {\n      for (const c of msg.candidates) {\n        var _c$content, _c$content$parts;\n        const t = c === null || c === void 0 ? void 0 : (_c$content = c.content) === null || _c$content === void 0 ? void 0 : (_c$content$parts = _c$content.parts) === null || _c$content$parts === void 0 ? void 0 : _c$content$parts.map(p => typeof (p === null || p === void 0 ? void 0 : p.text) === \"string\" ? p.text : \"\").join(\" \").trim();\n        if (t) return t;\n      }\n    }\n    return null;\n  }\n\n  // ---------- mic pipeline (prewarm BEFORE connect) ----------\n  async function ensureMicPipelineReady() {\n    if (micStreamRef.current && inputCtxRef.current && processorRef.current) return;\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    micStreamRef.current = stream;\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    inputCtxRef.current = ctx;\n    const src = ctx.createMediaStreamSource(stream);\n    const proc = ctx.createScriptProcessor(4096, 1, 1);\n    processorRef.current = proc;\n\n    // DO NOT audible-route mic -> speakers; keep processor alive via muted gain\n    const nullOut = ctx.createGain();\n    nullOut.gain.value = 0;\n    src.connect(proc);\n    proc.connect(nullOut);\n    nullOut.connect(ctx.destination);\n  }\n  function attachStreamingHandler(liveSession) {\n    const ctx = inputCtxRef.current;\n    const proc = processorRef.current;\n    proc.onaudioprocess = e => {\n      if (!sendEnabledRef.current) return;\n      const ch = e.inputBuffer.getChannelData(0);\n      const ds = downsampleTo16k(ch, ctx.sampleRate);\n      const pcm16 = floatTo16BitPCM(ds);\n      const b64 = arrayBufferToBase64(pcm16.buffer);\n      try {\n        liveSession.sendRealtimeInput({\n          audio: {\n            data: b64,\n            mimeType: `audio/pcm;rate=${INPUT_SAMPLE_RATE}`\n          }\n        });\n        lastSendTsRef.current = performance.now();\n      } catch {\n        // swallow during teardown\n      }\n    };\n  }\n\n  // small silent keepalive if idle > 3s\n  function startKeepAlive(liveSession) {\n    stopKeepAlive();\n    keepAliveTimerRef.current = setInterval(() => {\n      if (!sendEnabledRef.current) return;\n      const now = performance.now();\n      if (now - lastSendTsRef.current < 3000) return;\n      const silence = new Int16Array(Math.floor(INPUT_SAMPLE_RATE * 10 / 1000)); // ~10ms\n      try {\n        liveSession.sendRealtimeInput({\n          audio: {\n            data: arrayBufferToBase64(silence.buffer),\n            mimeType: `audio/pcm;rate=${INPUT_SAMPLE_RATE}`\n          }\n        });\n        lastSendTsRef.current = now;\n      } catch {}\n    }, 1000);\n  }\n  function stopKeepAlive() {\n    if (keepAliveTimerRef.current) {\n      clearInterval(keepAliveTimerRef.current);\n      keepAliveTimerRef.current = null;\n    }\n  }\n\n  // ---------- start / stop ----------\n  const startLive = async () => {\n    if (session) return;\n\n    // 1) Warm up mic *first* so we can stream immediately after onopen\n    await ensureMicPipelineReady();\n\n    // 2) Get ephemeral token (v1alpha on the client)\n    const res = await fetch(TOKEN_URL);\n    const json = await res.json();\n    const tokenVal = json === null || json === void 0 ? void 0 : json.token;\n    const ephemeralKey = typeof tokenVal === \"string\" ? tokenVal : tokenVal === null || tokenVal === void 0 ? void 0 : tokenVal.name;\n    if (!ephemeralKey) {\n      addLog(\"system\", \"Failed to fetch ephemeral token\");\n      return;\n    }\n    const ai = new GoogleGenAI({\n      apiKey: ephemeralKey,\n      httpOptions: {\n        apiVersion: \"v1alpha\"\n      }\n    });\n\n    // 3) Connect\n    const s = await ai.live.connect({\n      model: MODEL,\n      config: {\n        responseModalities: [\"AUDIO\", \"TEXT\"],\n        speechConfig: {\n          languageCode: \"hi-IN\",\n          voiceConfig: {\n            prebuiltVoiceConfig: {\n              voiceName: \"Puck\"\n            }\n          }\n        }\n      },\n      callbacks: {\n        onopen: () => {\n          wsOpenRef.current = true;\n          sendEnabledRef.current = true;\n          lastSendTsRef.current = performance.now();\n          addLog(\"system\", \"Live connected\");\n        },\n        onmessage: msg => {\n          var _msg$speechUpdate$aud, _msg$speechUpdate;\n          const audio = (_msg$speechUpdate$aud = msg === null || msg === void 0 ? void 0 : (_msg$speechUpdate = msg.speechUpdate) === null || _msg$speechUpdate === void 0 ? void 0 : _msg$speechUpdate.audio) !== null && _msg$speechUpdate$aud !== void 0 ? _msg$speechUpdate$aud : msg === null || msg === void 0 ? void 0 : msg.data;\n          if (audio) enqueuePlayback(audio);\n          const text = extractMessageText(msg);\n          if (text) addLog(\"ai\", text);\n        },\n        onerror: e => {\n          addLog(\"system\", `Error: ${String((e === null || e === void 0 ? void 0 : e.message) || e)}`);\n          console.error(\"Live error:\", e);\n        },\n        onclose: () => {\n          wsOpenRef.current = false;\n          sendEnabledRef.current = false;\n          addLog(\"system\", \"Live session closed\");\n          // tear down everything promptly to stop onaudioprocess\n          stopLive();\n        }\n      }\n    });\n    setSession(s);\n\n    // 4) attach mic → live stream *after* we have the session object\n    attachStreamingHandler(s);\n\n    // 5) keepalive while idle (prevents early closes if user is quiet)\n    startKeepAlive(s);\n  };\n  const stopLive = async () => {\n    // stop keepalive\n    stopKeepAlive();\n\n    // stop mic tracks\n    if (micStreamRef.current) {\n      micStreamRef.current.getTracks().forEach(t => t.stop());\n      micStreamRef.current = null;\n    }\n\n    // close input context\n    if (inputCtxRef.current) {\n      try {\n        await inputCtxRef.current.close();\n      } catch {}\n      inputCtxRef.current = null;\n    }\n    processorRef.current = null;\n\n    // clear playback + close output context\n    playQueueRef.current = [];\n    drainingRef.current = false;\n    if (outputCtxRef.current) {\n      try {\n        await outputCtxRef.current.close();\n      } catch {}\n      outputCtxRef.current = null;\n    }\n\n    // close session\n    if (session) {\n      try {\n        var _session$close;\n        await ((_session$close = session.close) === null || _session$close === void 0 ? void 0 : _session$close.call(session));\n      } catch {}\n      setSession(null);\n    }\n    wsOpenRef.current = false;\n    sendEnabledRef.current = false;\n    setIsSpeaking(false);\n    addLog(\"system\", \"Stopped\");\n  };\n  const sendText = async text => {\n    if (!session || !(text !== null && text !== void 0 && text.trim()) || !wsOpenRef.current) return;\n    const clean = text.trim();\n    addLog(\"user\", clean);\n    session.sendClientContent({\n      text: clean,\n      turnComplete: true\n    });\n  };\n\n  // cleanup on tab close\n  useEffect(() => {\n    const onUnload = () => {\n      try {\n        stopLive();\n      } catch {}\n    };\n    window.addEventListener(\"beforeunload\", onUnload);\n    return () => window.removeEventListener(\"beforeunload\", onUnload);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 720,\n      margin: \"24px auto\",\n      padding: 16\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Talking AI Avatar (Gemini Live)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Lottie, {\n      lottieRef: avatarRef,\n      animationData: talkingAvatar,\n      loop: true,\n      autoplay: false,\n      style: {\n        height: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: 8,\n        marginTop: 12\n      },\n      children: !session ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startLive,\n        children: \"Start Live\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            flex: 1,\n            padding: 8\n          },\n          placeholder: \"Type a message\\u2026\",\n          value: textInput,\n          onChange: e => setTextInput(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              sendText(textInput);\n              setTextInput(\"\");\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            sendText(textInput);\n            setTextInput(\"\");\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopLive,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        opacity: 0.7,\n        marginTop: 8\n      },\n      children: wsOpenRef.current ? isSpeaking ? \"Model is speaking…\" : \"Live connected. Speak into your mic.\" : session ? \"Connecting…\" : \"Click Start Live and allow mic permission.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 16,\n        padding: 12,\n        border: \"1px solid #ddd\",\n        borderRadius: 8,\n        background: \"#fafafa\",\n        maxHeight: 280,\n        overflow: \"auto\",\n        fontFamily: \"ui-monospace, SFMono-Regular, Menlo, monospace\",\n        fontSize: 14\n      },\n      children: log.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          opacity: 0.6\n        },\n        children: \"No messages yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this) : log.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 6\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            opacity: 0.6,\n            marginRight: 8\n          },\n          children: [\"[\", m.time, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          style: {\n            textTransform: \"capitalize\"\n          },\n          children: [m.role, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: m.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"f9Wr/1e/Z0UDm2u5uxwWoEdDbMY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Lottie","talkingAvatar","GoogleGenAI","jsxDEV","_jsxDEV","Fragment","_Fragment","MODEL","OUTPUT_SAMPLE_RATE","INPUT_SAMPLE_RATE","TOKEN_BASE","process","env","REACT_APP_TOKEN_BASE","TOKEN_URL","App","_s","avatarRef","session","setSession","wsOpenRef","sendEnabledRef","lastSendTsRef","keepAliveTimerRef","micStreamRef","inputCtxRef","outputCtxRef","processorRef","playQueueRef","drainingRef","isSpeaking","setIsSpeaking","log","setLog","textInput","setTextInput","current","play","stop","nowHHMMSS","d","Date","pad","n","String","padStart","getHours","getMinutes","getSeconds","addLog","role","text","prev","time","floatTo16BitPCM","float32","out","Int16Array","length","i","s","Math","max","min","downsampleTo16k","inRate","ratio","newLen","floor","Float32Array","pos","arrayBufferToBase64","ab","bytes","Uint8Array","bin","fromCharCode","btoa","base64ToInt16","b64","from","atob","c","charCodeAt","buffer","enqueuePlayback","chunk","int16","ArrayBuffer","push","drainPlayback","ctx","window","AudioContext","webkitAudioContext","sampleRate","shift","f32","buf","createBuffer","copyToChannel","Promise","resolve","src","createBufferSource","connect","destination","start","onended","extractMessageText","msg","_sc$modelTurn","trim","sc","serverContent","output","Array","isArray","t","map","o","filter","Boolean","join","modelTurn","parts","p","candidates","_c$content","_c$content$parts","content","ensureMicPipelineReady","stream","navigator","mediaDevices","getUserMedia","audio","createMediaStreamSource","proc","createScriptProcessor","nullOut","createGain","gain","value","attachStreamingHandler","liveSession","onaudioprocess","e","ch","inputBuffer","getChannelData","ds","pcm16","sendRealtimeInput","data","mimeType","performance","now","startKeepAlive","stopKeepAlive","setInterval","silence","clearInterval","startLive","res","fetch","json","tokenVal","token","ephemeralKey","name","ai","apiKey","httpOptions","apiVersion","live","model","config","responseModalities","speechConfig","languageCode","voiceConfig","prebuiltVoiceConfig","voiceName","callbacks","onopen","onmessage","_msg$speechUpdate$aud","_msg$speechUpdate","speechUpdate","onerror","message","console","error","onclose","stopLive","getTracks","forEach","close","_session$close","call","sendText","clean","sendClientContent","turnComplete","onUnload","addEventListener","removeEventListener","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","lottieRef","animationData","loop","autoplay","height","display","gap","marginTop","onClick","flex","placeholder","onChange","target","onKeyDown","key","opacity","border","borderRadius","background","maxHeight","overflow","fontFamily","fontSize","m","marginBottom","marginRight","textTransform","_c","$RefreshReg$"],"sources":["/private/var/www/html/dev-app/live-stream-talk/react-front/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Lottie from \"lottie-react\";\nimport talkingAvatar from \"./talking-avatar.json\";\nimport { GoogleGenAI } from \"@google/genai\";\n\n// Official Live model id (note the `models/` prefix in docs)\nconst MODEL = \"models/gemini-live-2.5-flash-preview\"; // half-cascaded audio model\n\n// Model → you: 24 kHz PCM\nconst OUTPUT_SAMPLE_RATE = 24000;\n// You → model: 16 kHz PCM\nconst INPUT_SAMPLE_RATE = 16000;\n\n// Token server\nconst TOKEN_BASE = process.env.REACT_APP_TOKEN_BASE || \"http://localhost:8787\";\nconst TOKEN_URL = `${TOKEN_BASE}/api/ephemeral-token`;\n\nexport default function App() {\n  const avatarRef = useRef(null);\n\n  // live session\n  const [session, setSession] = useState(null);\n\n  // flags + refs\n  const wsOpenRef = useRef(false);\n  const sendEnabledRef = useRef(false);       // only true while WS OPEN\n  const lastSendTsRef = useRef(0);            // for keepalive\n  const keepAliveTimerRef = useRef(null);\n\n  // mic + audio contexts\n  const micStreamRef = useRef(null);\n  const inputCtxRef = useRef(null);\n  const outputCtxRef = useRef(null);\n  const processorRef = useRef(null);\n\n  // playback queue\n  const playQueueRef = useRef([]);\n  const drainingRef = useRef(false);\n\n  // UI\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [log, setLog] = useState([]);\n  const [textInput, setTextInput] = useState(\"\");\n\n  // avatar follow speaking\n  useEffect(() => {\n    if (!avatarRef.current) return;\n    isSpeaking ? avatarRef.current.play() : avatarRef.current.stop();\n  }, [isSpeaking]);\n\n  // ---------- helpers ----------\n  const nowHHMMSS = () => {\n    const d = new Date();\n    const pad = (n) => String(n).padStart(2, \"0\");\n    return `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;\n  };\n  const addLog = (role, text) =>\n    setLog((prev) => [...prev, { time: nowHHMMSS(), role, text }]);\n\n  // Float32 → Int16\n  const floatTo16BitPCM = (float32) => {\n    const out = new Int16Array(float32.length);\n    for (let i = 0; i < float32.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32[i]));\n      out[i] = s < 0 ? s * 0x8000 : s * 0x7fff;\n    }\n    return out;\n  };\n\n  // downsample to 16k\n  const downsampleTo16k = (float32, inRate) => {\n    if (inRate === INPUT_SAMPLE_RATE) return float32;\n    const ratio = inRate / INPUT_SAMPLE_RATE;\n    const newLen = Math.floor(float32.length / ratio);\n    const out = new Float32Array(newLen);\n    let pos = 0;\n    for (let i = 0; i < newLen; i++, pos += ratio) out[i] = float32[Math.floor(pos)];\n    return out;\n  };\n\n  // ArrayBuffer <-> base64\n  const arrayBufferToBase64 = (ab) => {\n    const bytes = new Uint8Array(ab);\n    let bin = \"\";\n    for (let i = 0; i < bytes.length; i++) bin += String.fromCharCode(bytes[i]);\n    return btoa(bin);\n  };\n  const base64ToInt16 = (b64) => {\n    const bytes = Uint8Array.from(atob(b64), (c) => c.charCodeAt(0));\n    return new Int16Array(bytes.buffer);\n  };\n\n  // ---------- playback (strict FIFO @24k) ----------\n  async function enqueuePlayback(chunk) {\n    let int16;\n    if (typeof chunk === \"string\") int16 = base64ToInt16(chunk);\n    else if (chunk instanceof ArrayBuffer) int16 = new Int16Array(chunk);\n    else return;\n    playQueueRef.current.push(int16);\n    if (!drainingRef.current) drainPlayback();\n  }\n\n  async function drainPlayback() {\n    drainingRef.current = true;\n    const ctx =\n      outputCtxRef.current ||\n      new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: OUTPUT_SAMPLE_RATE,\n      });\n    if (!outputCtxRef.current) outputCtxRef.current = ctx;\n\n    while (playQueueRef.current.length) {\n      const int16 = playQueueRef.current.shift();\n      const f32 = new Float32Array(int16.length);\n      for (let i = 0; i < int16.length; i++) f32[i] = int16[i] / 0x8000;\n\n      const buf = ctx.createBuffer(1, f32.length, OUTPUT_SAMPLE_RATE);\n      buf.copyToChannel(f32, 0);\n      await new Promise((resolve) => {\n        const src = ctx.createBufferSource();\n        src.buffer = buf;\n        src.connect(ctx.destination);\n        setIsSpeaking(true);\n        src.start();\n        src.onended = () => {\n          setIsSpeaking(false);\n          resolve();\n        };\n      });\n    }\n    drainingRef.current = false;\n  }\n\n  // extract AI text from messages (varies across preview builds)\n  function extractMessageText(msg) {\n    if (typeof msg?.text === \"string\" && msg.text.trim()) return msg.text.trim();\n    const sc = msg?.serverContent;\n    if (sc?.output && Array.isArray(sc.output)) {\n      const t = sc.output.map((o) => o?.text).filter(Boolean).join(\" \").trim();\n      if (t) return t;\n    }\n    if (sc?.modelTurn?.parts) {\n      const t = sc.modelTurn.parts\n        .map((p) => (typeof p?.text === \"string\" ? p.text : \"\"))\n        .join(\" \")\n        .trim();\n      if (t) return t;\n    }\n    if (Array.isArray(msg?.candidates)) {\n      for (const c of msg.candidates) {\n        const t = c?.content?.parts\n          ?.map((p) => (typeof p?.text === \"string\" ? p.text : \"\"))\n          .join(\" \")\n          .trim();\n        if (t) return t;\n      }\n    }\n    return null;\n  }\n\n  // ---------- mic pipeline (prewarm BEFORE connect) ----------\n  async function ensureMicPipelineReady() {\n    if (micStreamRef.current && inputCtxRef.current && processorRef.current) return;\n\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    micStreamRef.current = stream;\n\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    inputCtxRef.current = ctx;\n\n    const src = ctx.createMediaStreamSource(stream);\n    const proc = ctx.createScriptProcessor(4096, 1, 1);\n    processorRef.current = proc;\n\n    // DO NOT audible-route mic -> speakers; keep processor alive via muted gain\n    const nullOut = ctx.createGain();\n    nullOut.gain.value = 0;\n    src.connect(proc);\n    proc.connect(nullOut);\n    nullOut.connect(ctx.destination);\n  }\n\n  function attachStreamingHandler(liveSession) {\n    const ctx = inputCtxRef.current;\n    const proc = processorRef.current;\n\n    proc.onaudioprocess = (e) => {\n      if (!sendEnabledRef.current) return;\n\n      const ch = e.inputBuffer.getChannelData(0);\n      const ds = downsampleTo16k(ch, ctx.sampleRate);\n      const pcm16 = floatTo16BitPCM(ds);\n      const b64 = arrayBufferToBase64(pcm16.buffer);\n\n      try {\n        liveSession.sendRealtimeInput({\n          audio: { data: b64, mimeType: `audio/pcm;rate=${INPUT_SAMPLE_RATE}` },\n        });\n        lastSendTsRef.current = performance.now();\n      } catch {\n        // swallow during teardown\n      }\n    };\n  }\n\n  // small silent keepalive if idle > 3s\n  function startKeepAlive(liveSession) {\n    stopKeepAlive();\n    keepAliveTimerRef.current = setInterval(() => {\n      if (!sendEnabledRef.current) return;\n      const now = performance.now();\n      if (now - lastSendTsRef.current < 3000) return;\n\n      const silence = new Int16Array(Math.floor((INPUT_SAMPLE_RATE * 10) / 1000)); // ~10ms\n      try {\n        liveSession.sendRealtimeInput({\n          audio: {\n            data: arrayBufferToBase64(silence.buffer),\n            mimeType: `audio/pcm;rate=${INPUT_SAMPLE_RATE}`,\n          },\n        });\n        lastSendTsRef.current = now;\n      } catch {}\n    }, 1000);\n  }\n  function stopKeepAlive() {\n    if (keepAliveTimerRef.current) {\n      clearInterval(keepAliveTimerRef.current);\n      keepAliveTimerRef.current = null;\n    }\n  }\n\n  // ---------- start / stop ----------\n  const startLive = async () => {\n    if (session) return;\n\n    // 1) Warm up mic *first* so we can stream immediately after onopen\n    await ensureMicPipelineReady();\n\n    // 2) Get ephemeral token (v1alpha on the client)\n    const res = await fetch(TOKEN_URL);\n    const json = await res.json();\n    const tokenVal = json?.token;\n    const ephemeralKey = typeof tokenVal === \"string\" ? tokenVal : tokenVal?.name;\n    if (!ephemeralKey) {\n      addLog(\"system\", \"Failed to fetch ephemeral token\");\n      return;\n    }\n\n    const ai = new GoogleGenAI({\n      apiKey: ephemeralKey,\n      httpOptions: { apiVersion: \"v1alpha\" },\n    });\n\n    // 3) Connect\n    const s = await ai.live.connect({\n      model: MODEL,\n      config: {\n        responseModalities: [\"AUDIO\", \"TEXT\"],\n        speechConfig: {\n          languageCode: \"hi-IN\",\n          voiceConfig: { prebuiltVoiceConfig: { voiceName: \"Puck\" } },\n        },\n      },\n      callbacks: {\n        onopen: () => {\n          wsOpenRef.current = true;\n          sendEnabledRef.current = true;\n          lastSendTsRef.current = performance.now();\n          addLog(\"system\", \"Live connected\");\n        },\n        onmessage: (msg) => {\n          const audio = msg?.speechUpdate?.audio ?? msg?.data;\n          if (audio) enqueuePlayback(audio);\n          const text = extractMessageText(msg);\n          if (text) addLog(\"ai\", text);\n        },\n        onerror: (e) => {\n          addLog(\"system\", `Error: ${String(e?.message || e)}`);\n          console.error(\"Live error:\", e);\n        },\n        onclose: () => {\n          wsOpenRef.current = false;\n          sendEnabledRef.current = false;\n          addLog(\"system\", \"Live session closed\");\n          // tear down everything promptly to stop onaudioprocess\n          stopLive();\n        },\n      },\n    });\n\n    setSession(s);\n\n    // 4) attach mic → live stream *after* we have the session object\n    attachStreamingHandler(s);\n\n    // 5) keepalive while idle (prevents early closes if user is quiet)\n    startKeepAlive(s);\n  };\n\n  const stopLive = async () => {\n    // stop keepalive\n    stopKeepAlive();\n\n    // stop mic tracks\n    if (micStreamRef.current) {\n      micStreamRef.current.getTracks().forEach((t) => t.stop());\n      micStreamRef.current = null;\n    }\n\n    // close input context\n    if (inputCtxRef.current) {\n      try { await inputCtxRef.current.close(); } catch {}\n      inputCtxRef.current = null;\n    }\n    processorRef.current = null;\n\n    // clear playback + close output context\n    playQueueRef.current = [];\n    drainingRef.current = false;\n    if (outputCtxRef.current) {\n      try { await outputCtxRef.current.close(); } catch {}\n      outputCtxRef.current = null;\n    }\n\n    // close session\n    if (session) {\n      try { await session.close?.(); } catch {}\n      setSession(null);\n    }\n\n    wsOpenRef.current = false;\n    sendEnabledRef.current = false;\n    setIsSpeaking(false);\n    addLog(\"system\", \"Stopped\");\n  };\n\n  const sendText = async (text) => {\n    if (!session || !text?.trim() || !wsOpenRef.current) return;\n    const clean = text.trim();\n    addLog(\"user\", clean);\n    session.sendClientContent({ text: clean, turnComplete: true });\n  };\n\n  // cleanup on tab close\n  useEffect(() => {\n    const onUnload = () => { try { stopLive(); } catch {} };\n    window.addEventListener(\"beforeunload\", onUnload);\n    return () => window.removeEventListener(\"beforeunload\", onUnload);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session]);\n\n  return (\n    <div style={{ maxWidth: 720, margin: \"24px auto\", padding: 16 }}>\n      <h2>Talking AI Avatar (Gemini Live)</h2>\n\n      <Lottie\n        lottieRef={avatarRef}\n        animationData={talkingAvatar}\n        loop\n        autoplay={false}\n        style={{ height: 300 }}\n      />\n\n      <div style={{ display: \"flex\", gap: 8, marginTop: 12 }}>\n        {!session ? (\n          <button onClick={startLive}>Start Live</button>\n        ) : (\n          <>\n            <input\n              style={{ flex: 1, padding: 8 }}\n              placeholder=\"Type a message…\"\n              value={textInput}\n              onChange={(e) => setTextInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  sendText(textInput);\n                  setTextInput(\"\");\n                }\n              }}\n            />\n            <button onClick={() => { sendText(textInput); setTextInput(\"\"); }}>\n              Send\n            </button>\n            <button onClick={stopLive}>Stop</button>\n          </>\n        )}\n      </div>\n\n      <p style={{ opacity: 0.7, marginTop: 8 }}>\n        {wsOpenRef.current\n          ? isSpeaking\n            ? \"Model is speaking…\"\n            : \"Live connected. Speak into your mic.\"\n          : session\n          ? \"Connecting…\"\n          : \"Click Start Live and allow mic permission.\"}\n      </p>\n\n      {/* Conversation Log */}\n      <div\n        style={{\n          marginTop: 16,\n          padding: 12,\n          border: \"1px solid #ddd\",\n          borderRadius: 8,\n          background: \"#fafafa\",\n          maxHeight: 280,\n          overflow: \"auto\",\n          fontFamily: \"ui-monospace, SFMono-Regular, Menlo, monospace\",\n          fontSize: 14,\n        }}\n      >\n        {log.length === 0 ? (\n          <div style={{ opacity: 0.6 }}>No messages yet.</div>\n        ) : (\n          log.map((m, i) => (\n            <div key={i} style={{ marginBottom: 6 }}>\n              <span style={{ opacity: 0.6, marginRight: 8 }}>[{m.time}]</span>\n              <strong style={{ textTransform: \"capitalize\" }}>{m.role}:</strong>{\" \"}\n              <span>{m.text}</span>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}