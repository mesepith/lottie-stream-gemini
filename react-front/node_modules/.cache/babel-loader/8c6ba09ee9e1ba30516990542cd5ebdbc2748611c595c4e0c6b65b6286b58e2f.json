{"ast":null,"code":"var _jsxFileName = \"/private/var/www/html/dev-app/live-stream-talk/react-front/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport Lottie from \"lottie-react\";\nimport talkingAvatar from \"./talking-avatar.json\";\nimport { GoogleGenAI } from \"@google/genai\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MODEL = \"gemini-live-2.5-flash-preview\";\nconst OUTPUT_SAMPLE_RATE = 24000;\nexport default function App() {\n  _s();\n  const avatarRef = useRef(null);\n  const liveOpenRef = useRef(false); // true while live socket is open\n  const micGraphRef = useRef({\n    ctx: null,\n    node: null,\n    source: null\n  }); // to cleanly tear down\n\n  // ---- audio queue state (unchanged behavior) ----\n  const audioQueueRef = useRef([]);\n  const isModelSpeakingRef = useRef(false);\n  const [session, setSession] = useState(null);\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [micStream, setMicStream] = useState(null);\n  const [isModelSpeaking, setIsModelSpeaking] = useState(false);\n\n  // ---- NEW: chat history state ----\n  const [history, setHistory] = useState([]); // {role: 'ai'|'user', text: string, ts: number}\n  const historyEndRef = useRef(null);\n\n  // Auto-scroll to newest message\n  useEffect(() => {\n    var _historyEndRef$curren;\n    (_historyEndRef$curren = historyEndRef.current) === null || _historyEndRef$curren === void 0 ? void 0 : _historyEndRef$curren.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [history]);\n\n  // Lottie playback tied to speaking flag\n  useEffect(() => {\n    if (!avatarRef.current) return;\n    if (isModelSpeaking) avatarRef.current.play();else avatarRef.current.stop();\n  }, [isModelSpeaking]);\n\n  // ---------- helpers: audio conversions ----------\n  function floatTo16BitPCM(float32) {\n    const out = new Int16Array(float32.length);\n    for (let i = 0; i < float32.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32[i]));\n      out[i] = s < 0 ? s * 0x8000 : s * 0x7fff;\n    }\n    return out;\n  }\n  function downsampleTo16k(float32, inRate) {\n    const outRate = 16000;\n    if (inRate === outRate) return float32;\n    const ratio = inRate / outRate;\n    const newLen = Math.floor(float32.length / ratio);\n    const out = new Float32Array(newLen);\n    let pos = 0;\n    for (let i = 0; i < newLen; i++, pos += ratio) {\n      out[i] = float32[Math.floor(pos)];\n    }\n    return out;\n  }\n  function arrayBufferToBase64(ab) {\n    const bytes = new Uint8Array(ab);\n    let bin = \"\";\n    for (let i = 0; i < bytes.length; i++) bin += String.fromCharCode(bytes[i]);\n    return btoa(bin);\n  }\n  function base64ToInt16(b64) {\n    const bytes = Uint8Array.from(atob(b64), c => c.charCodeAt(0));\n    return new Int16Array(bytes.buffer);\n  }\n\n  // ---------- NEW: history helpers ----------\n  const pushHistory = (role, text) => {\n    if (!text || !text.trim()) return;\n    setHistory(h => [...h, {\n      role,\n      text: text.trim(),\n      ts: Date.now()\n    }]);\n  };\n\n  // Try to robustly extract model text from live messages (covers multiple shapes)\n  const extractModelText = msg => {\n    if (!msg) return \"\";\n    // Simple cases\n    if (typeof msg.text === \"string\" && msg.text.trim()) return msg.text;\n\n    // Candidate/parts shape\n    const mt = msg.modelTurn || msg.output || msg.candidates || msg.response;\n    const candidates = (mt === null || mt === void 0 ? void 0 : mt.candidates) || (msg === null || msg === void 0 ? void 0 : msg.candidates);\n    if (Array.isArray(candidates) && candidates.length) {\n      var _candidates$, _candidates$$content, _candidates$2, _candidates$2$content;\n      const parts = ((_candidates$ = candidates[0]) === null || _candidates$ === void 0 ? void 0 : (_candidates$$content = _candidates$.content) === null || _candidates$$content === void 0 ? void 0 : _candidates$$content.parts) || ((_candidates$2 = candidates[0]) === null || _candidates$2 === void 0 ? void 0 : (_candidates$2$content = _candidates$2.content) === null || _candidates$2$content === void 0 ? void 0 : _candidates$2$content.parts) || [];\n      const t = (parts || []).map(p => p === null || p === void 0 ? void 0 : p.text).filter(Boolean).join(\" \");\n      if (t !== null && t !== void 0 && t.trim()) return t;\n    }\n\n    // Generic parts\n    if (Array.isArray(msg.parts)) {\n      const t = msg.parts.map(p => p === null || p === void 0 ? void 0 : p.text).filter(Boolean).join(\" \");\n      if (t !== null && t !== void 0 && t.trim()) return t;\n    }\n\n    // Fallback: non-audio data field sometimes carries text\n    if (msg !== null && msg !== void 0 && msg.data && typeof msg.data === \"string\" && !msg.speechUpdate) {\n      return msg.data;\n    }\n    return \"\";\n  };\n\n  // ---------- audio queue processor ----------\n  const processAudioQueue = useCallback(async () => {\n    if (isModelSpeakingRef.current || audioQueueRef.current.length === 0) return;\n    isModelSpeakingRef.current = true;\n    setIsModelSpeaking(true);\n    const audioChunk = audioQueueRef.current.shift();\n    const ctx = audioCtx || new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: OUTPUT_SAMPLE_RATE\n    });\n    if (!audioCtx) setAudioCtx(ctx);\n    const f32 = new Float32Array(audioChunk.length);\n    for (let i = 0; i < audioChunk.length; i++) f32[i] = audioChunk[i] / 0x8000;\n    const buffer = ctx.createBuffer(1, f32.length, OUTPUT_SAMPLE_RATE);\n    buffer.copyToChannel(f32, 0, 0);\n    const src = ctx.createBufferSource();\n    src.buffer = buffer;\n    src.connect(ctx.destination);\n    src.onended = () => {\n      isModelSpeakingRef.current = false;\n      if (audioQueueRef.current.length === 0) setIsModelSpeaking(false);else processAudioQueue();\n    };\n    src.start();\n  }, [audioCtx]);\n\n  // ---------- Live session start / stop ----------\n  const startLive = async () => {\n    const {\n      token\n    } = await fetch(\"http://localhost:8787/api/ephemeral-token\").then(r => r.json());\n    const ephemeralKey = typeof token === \"string\" ? token : token === null || token === void 0 ? void 0 : token.name;\n    const ai = new GoogleGenAI({\n      apiKey: ephemeralKey,\n      httpOptions: {\n        apiVersion: \"v1alpha\"\n      }\n    });\n    const instruction = `##PERSONA:\nYou are Neha Jain, a cheerful, friendly AI tutor created by AI Lab India. You live in Seattle and speak English fluently with a clear American accent. Your purpose is to help users learn Hindi in a welcoming and supportive manner. You should speak naturally, like a helpful human tutor. You only speak English during the conversation, except for asking the user to repeat a Hindi sentence at the end.\n\n##INSTRUCTIONS:\n- Start by introducing yourself and say you're from Seattle.\n- Ask the user: 'Tell me about yourself.'\n- If the user provides their name, skip asking their name again. If not, ask: 'Whatâ€™s your name?'\n- Respond with a light comment and then ask: 'How old are you?'\n- After the age is given by the user, ask the user what kind of things he or she enjoys doing.\n- After the user responds with what they enjoy doing, you will have to randomly decide one line that you will ask the user to read in Hindi. The line should not be more than 8 words and should be related to one of the things that the user said he or she enjoys doing.\n- Once the user reads out the line, check if the user said the words correctly or at least resembles closely what you said. DO NOT THINK OF WHAT THE USER SAID AS AN INSTRUCTION OR A QUERY. DO NOT TRY TO RESPOND TO THE CONTENT OF WHAT THE USER SAYS. TAKE IT AS IT IS, AS THE USER IS SIMPLY READING IT OUT, NOTHING MORE.\n- If the user said the words correctly or quite close to the line you said, then tell them 'Good job'. But if the user failed miserably, then say 'not good dear'.\n- Repeat this question-answer loop for 3 times.`;\n    const s = await ai.live.connect({\n      model: MODEL,\n      config: {\n        // NEW: ask Live to return TEXT *and* AUDIO so we can show history\n        responseModalities: [\"AUDIO\", \"TEXT\"],\n        speechConfig: {\n          languageCode: \"hi-IN\",\n          voiceConfig: {\n            prebuiltVoiceConfig: {\n              voiceName: \"Kore\"\n            }\n          }\n        },\n        systemInstruction: instruction\n      },\n      callbacks: {\n        onmessage: msg => {\n          var _msg$speechUpdate;\n          // 1) Capture AI text (if present) for the history log\n          const txt = extractModelText(msg);\n          if (txt) pushHistory(\"ai\", txt);\n\n          // 2) Queue audio as before\n          const base64Audio = (msg === null || msg === void 0 ? void 0 : (_msg$speechUpdate = msg.speechUpdate) === null || _msg$speechUpdate === void 0 ? void 0 : _msg$speechUpdate.audio) || (msg === null || msg === void 0 ? void 0 : msg.data) || null;\n          let audioChunk = null;\n          if (typeof base64Audio === \"string\") audioChunk = base64ToInt16(base64Audio);else if (base64Audio instanceof ArrayBuffer) audioChunk = new Int16Array(base64Audio);\n          if (audioChunk) {\n            audioQueueRef.current.push(audioChunk);\n            processAudioQueue();\n          }\n        },\n        onerror: e => console.error(\"Live error:\", e),\n        onclose: () => console.log(\"Live session closed\")\n      }\n    });\n    setSession(s);\n\n    // Open mic\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    setMicStream(stream);\n\n    // Capture mic frames and send (muted while model speaks)\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    const src = ctx.createMediaStreamSource(stream);\n    const proc = ctx.createScriptProcessor(4096, 1, 1);\n    src.connect(proc);\n    proc.connect(ctx.destination);\n    proc.onaudioprocess = e => {\n      if (isModelSpeakingRef.current) return; // mute mic during model speech\n      const inBuf = e.inputBuffer.getChannelData(0);\n      const ds = downsampleTo16k(inBuf, ctx.sampleRate);\n      const pcm16 = floatTo16BitPCM(ds);\n      const mime = \"audio/pcm;rate=16000\";\n      s.sendRealtimeInput({\n        audio: {\n          data: arrayBufferToBase64(pcm16.buffer),\n          mimeType: mime\n        }\n      });\n    };\n  };\n  const stopLive = async () => {\n    if (micStream) {\n      micStream.getTracks().forEach(t => t.stop());\n      setMicStream(null);\n    }\n    if (session) {\n      try {\n        var _session$close;\n        await ((_session$close = session.close) === null || _session$close === void 0 ? void 0 : _session$close.call(session));\n      } catch {}\n      setSession(null);\n    }\n    if (audioCtx) {\n      try {\n        await audioCtx.close();\n      } catch {}\n      setAudioCtx(null);\n    }\n    // Keep history across sessions; clear only audio state\n    audioQueueRef.current = [];\n    isModelSpeakingRef.current = false;\n    setIsModelSpeaking(false);\n  };\n  const sendText = async text => {\n    if (!session || !(text !== null && text !== void 0 && text.trim())) return;\n    // Show userâ€™s text in the history\n    pushHistory(\"user\", text);\n    session.sendClientContent({\n      text,\n      turnComplete: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    style: {\n      padding: 16,\n      paddingBottom: 220,\n      // make space for the fixed history bar\n      fontFamily: \"system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Talking AI Avatar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Lottie, {\n      lottieRef: avatarRef,\n      animationData: talkingAvatar,\n      loop: true,\n      autoplay: false,\n      style: {\n        height: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: 8,\n        marginTop: 12\n      },\n      children: !session ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startLive,\n        children: \"Start Live\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendText(\"Tell me a short story.\"),\n          children: \"Send Text Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopLive,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        opacity: 0.7,\n        marginTop: 8\n      },\n      children: session ? isModelSpeaking ? \"Model is speaking...\" : \"Live connected. Speak into your mic.\" : \"Click Start Live and give mic permission.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: \"rgba(20,20,20,0.9)\",\n        borderTop: \"1px solid #333\",\n        padding: 12,\n        maxHeight: 200,\n        overflowY: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 12,\n          opacity: 0.8,\n          marginBottom: 6\n        },\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), history.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: 8,\n          marginBottom: 6,\n          alignItems: \"flex-start\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 11,\n            opacity: 0.7,\n            minWidth: 36,\n            textTransform: \"uppercase\"\n          },\n          children: m.role === \"ai\" ? \"AI\" : \"You\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: m.role === \"ai\" ? \"#1e1e1e\" : \"#262626\",\n            border: \"1px solid #333\",\n            padding: \"8px 10px\",\n            borderRadius: 8,\n            maxWidth: 800,\n            whiteSpace: \"pre-wrap\",\n            wordBreak: \"break-word\",\n            lineHeight: 1.35\n          },\n          children: m.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: historyEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CRvhEGcenDFcSHN/odvPRfkjjOU=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","Lottie","talkingAvatar","GoogleGenAI","jsxDEV","_jsxDEV","Fragment","_Fragment","MODEL","OUTPUT_SAMPLE_RATE","App","_s","avatarRef","liveOpenRef","micGraphRef","ctx","node","source","audioQueueRef","isModelSpeakingRef","session","setSession","audioCtx","setAudioCtx","micStream","setMicStream","isModelSpeaking","setIsModelSpeaking","history","setHistory","historyEndRef","_historyEndRef$curren","current","scrollIntoView","behavior","play","stop","floatTo16BitPCM","float32","out","Int16Array","length","i","s","Math","max","min","downsampleTo16k","inRate","outRate","ratio","newLen","floor","Float32Array","pos","arrayBufferToBase64","ab","bytes","Uint8Array","bin","String","fromCharCode","btoa","base64ToInt16","b64","from","atob","c","charCodeAt","buffer","pushHistory","role","text","trim","h","ts","Date","now","extractModelText","msg","mt","modelTurn","output","candidates","response","Array","isArray","_candidates$","_candidates$$content","_candidates$2","_candidates$2$content","parts","content","t","map","p","filter","Boolean","join","data","speechUpdate","processAudioQueue","audioChunk","shift","window","AudioContext","webkitAudioContext","sampleRate","f32","createBuffer","copyToChannel","src","createBufferSource","connect","destination","onended","start","startLive","token","fetch","then","r","json","ephemeralKey","name","ai","apiKey","httpOptions","apiVersion","instruction","live","model","config","responseModalities","speechConfig","languageCode","voiceConfig","prebuiltVoiceConfig","voiceName","systemInstruction","callbacks","onmessage","_msg$speechUpdate","txt","base64Audio","audio","ArrayBuffer","push","onerror","e","console","error","onclose","log","stream","navigator","mediaDevices","getUserMedia","createMediaStreamSource","proc","createScriptProcessor","onaudioprocess","inBuf","inputBuffer","getChannelData","ds","pcm16","mime","sendRealtimeInput","mimeType","stopLive","getTracks","forEach","_session$close","close","call","sendText","sendClientContent","turnComplete","className","style","padding","paddingBottom","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","lottieRef","animationData","loop","autoplay","height","display","gap","marginTop","onClick","opacity","position","left","right","bottom","background","borderTop","maxHeight","overflowY","fontSize","marginBottom","m","alignItems","minWidth","textTransform","border","borderRadius","maxWidth","whiteSpace","wordBreak","lineHeight","ref","_c","$RefreshReg$"],"sources":["/private/var/www/html/dev-app/live-stream-talk/react-front/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport Lottie from \"lottie-react\";\nimport talkingAvatar from \"./talking-avatar.json\";\nimport { GoogleGenAI } from \"@google/genai\";\n\nconst MODEL = \"gemini-live-2.5-flash-preview\";\nconst OUTPUT_SAMPLE_RATE = 24000;\n\nexport default function App() {\n  const avatarRef = useRef(null);\n\n  const liveOpenRef = useRef(false);   // true while live socket is open\n  const micGraphRef = useRef({ ctx: null, node: null, source: null }); // to cleanly tear down\n\n  // ---- audio queue state (unchanged behavior) ----\n  const audioQueueRef = useRef([]);\n  const isModelSpeakingRef = useRef(false);\n\n  const [session, setSession] = useState(null);\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [micStream, setMicStream] = useState(null);\n  const [isModelSpeaking, setIsModelSpeaking] = useState(false);\n\n  // ---- NEW: chat history state ----\n  const [history, setHistory] = useState([]); // {role: 'ai'|'user', text: string, ts: number}\n  const historyEndRef = useRef(null);\n\n  // Auto-scroll to newest message\n  useEffect(() => {\n    historyEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [history]);\n\n  // Lottie playback tied to speaking flag\n  useEffect(() => {\n    if (!avatarRef.current) return;\n    if (isModelSpeaking) avatarRef.current.play();\n    else avatarRef.current.stop();\n  }, [isModelSpeaking]);\n\n  // ---------- helpers: audio conversions ----------\n  function floatTo16BitPCM(float32) {\n    const out = new Int16Array(float32.length);\n    for (let i = 0; i < float32.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32[i]));\n      out[i] = s < 0 ? s * 0x8000 : s * 0x7fff;\n    }\n    return out;\n  }\n\n  function downsampleTo16k(float32, inRate) {\n    const outRate = 16000;\n    if (inRate === outRate) return float32;\n    const ratio = inRate / outRate;\n    const newLen = Math.floor(float32.length / ratio);\n    const out = new Float32Array(newLen);\n    let pos = 0;\n    for (let i = 0; i < newLen; i++, pos += ratio) {\n      out[i] = float32[Math.floor(pos)];\n    }\n    return out;\n  }\n\n  function arrayBufferToBase64(ab) {\n    const bytes = new Uint8Array(ab);\n    let bin = \"\";\n    for (let i = 0; i < bytes.length; i++) bin += String.fromCharCode(bytes[i]);\n    return btoa(bin);\n  }\n\n  function base64ToInt16(b64) {\n    const bytes = Uint8Array.from(atob(b64), (c) => c.charCodeAt(0));\n    return new Int16Array(bytes.buffer);\n  }\n\n  // ---------- NEW: history helpers ----------\n  const pushHistory = (role, text) => {\n    if (!text || !text.trim()) return;\n    setHistory((h) => [...h, { role, text: text.trim(), ts: Date.now() }]);\n  };\n\n  // Try to robustly extract model text from live messages (covers multiple shapes)\n  const extractModelText = (msg) => {\n    if (!msg) return \"\";\n    // Simple cases\n    if (typeof msg.text === \"string\" && msg.text.trim()) return msg.text;\n\n    // Candidate/parts shape\n    const mt = msg.modelTurn || msg.output || msg.candidates || msg.response;\n    const candidates = mt?.candidates || msg?.candidates;\n    if (Array.isArray(candidates) && candidates.length) {\n      const parts = candidates[0]?.content?.parts || candidates[0]?.content?.parts || [];\n      const t = (parts || []).map((p) => p?.text).filter(Boolean).join(\" \");\n      if (t?.trim()) return t;\n    }\n\n    // Generic parts\n    if (Array.isArray(msg.parts)) {\n      const t = msg.parts.map((p) => p?.text).filter(Boolean).join(\" \");\n      if (t?.trim()) return t;\n    }\n\n    // Fallback: non-audio data field sometimes carries text\n    if (msg?.data && typeof msg.data === \"string\" && !msg.speechUpdate) {\n      return msg.data;\n    }\n\n    return \"\";\n  };\n\n  // ---------- audio queue processor ----------\n  const processAudioQueue = useCallback(async () => {\n    if (isModelSpeakingRef.current || audioQueueRef.current.length === 0) return;\n\n    isModelSpeakingRef.current = true;\n    setIsModelSpeaking(true);\n\n    const audioChunk = audioQueueRef.current.shift();\n\n    const ctx =\n      audioCtx ||\n      new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: OUTPUT_SAMPLE_RATE,\n      });\n    if (!audioCtx) setAudioCtx(ctx);\n\n    const f32 = new Float32Array(audioChunk.length);\n    for (let i = 0; i < audioChunk.length; i++) f32[i] = audioChunk[i] / 0x8000;\n\n    const buffer = ctx.createBuffer(1, f32.length, OUTPUT_SAMPLE_RATE);\n    buffer.copyToChannel(f32, 0, 0);\n    const src = ctx.createBufferSource();\n    src.buffer = buffer;\n    src.connect(ctx.destination);\n\n    src.onended = () => {\n      isModelSpeakingRef.current = false;\n      if (audioQueueRef.current.length === 0) setIsModelSpeaking(false);\n      else processAudioQueue();\n    };\n\n    src.start();\n  }, [audioCtx]);\n\n  // ---------- Live session start / stop ----------\n  const startLive = async () => {\n    const { token } = await fetch(\"http://localhost:8787/api/ephemeral-token\").then(\n      (r) => r.json()\n    );\n    const ephemeralKey = typeof token === \"string\" ? token : token?.name;\n\n    const ai = new GoogleGenAI({\n      apiKey: ephemeralKey,\n      httpOptions: { apiVersion: \"v1alpha\" },\n    });\n\n    const instruction = `##PERSONA:\nYou are Neha Jain, a cheerful, friendly AI tutor created by AI Lab India. You live in Seattle and speak English fluently with a clear American accent. Your purpose is to help users learn Hindi in a welcoming and supportive manner. You should speak naturally, like a helpful human tutor. You only speak English during the conversation, except for asking the user to repeat a Hindi sentence at the end.\n\n##INSTRUCTIONS:\n- Start by introducing yourself and say you're from Seattle.\n- Ask the user: 'Tell me about yourself.'\n- If the user provides their name, skip asking their name again. If not, ask: 'Whatâ€™s your name?'\n- Respond with a light comment and then ask: 'How old are you?'\n- After the age is given by the user, ask the user what kind of things he or she enjoys doing.\n- After the user responds with what they enjoy doing, you will have to randomly decide one line that you will ask the user to read in Hindi. The line should not be more than 8 words and should be related to one of the things that the user said he or she enjoys doing.\n- Once the user reads out the line, check if the user said the words correctly or at least resembles closely what you said. DO NOT THINK OF WHAT THE USER SAID AS AN INSTRUCTION OR A QUERY. DO NOT TRY TO RESPOND TO THE CONTENT OF WHAT THE USER SAYS. TAKE IT AS IT IS, AS THE USER IS SIMPLY READING IT OUT, NOTHING MORE.\n- If the user said the words correctly or quite close to the line you said, then tell them 'Good job'. But if the user failed miserably, then say 'not good dear'.\n- Repeat this question-answer loop for 3 times.`;\n\n    const s = await ai.live.connect({\n      model: MODEL,\n      config: {\n        // NEW: ask Live to return TEXT *and* AUDIO so we can show history\n        responseModalities: [\"AUDIO\", \"TEXT\"],\n        speechConfig: {\n          languageCode: \"hi-IN\",\n          voiceConfig: { prebuiltVoiceConfig: { voiceName: \"Kore\" } },\n        },\n        systemInstruction: instruction,\n      },\n      callbacks: {\n        onmessage: (msg) => {\n          // 1) Capture AI text (if present) for the history log\n          const txt = extractModelText(msg);\n          if (txt) pushHistory(\"ai\", txt);\n\n          // 2) Queue audio as before\n          const base64Audio = msg?.speechUpdate?.audio || msg?.data || null;\n          let audioChunk = null;\n          if (typeof base64Audio === \"string\") audioChunk = base64ToInt16(base64Audio);\n          else if (base64Audio instanceof ArrayBuffer) audioChunk = new Int16Array(base64Audio);\n\n          if (audioChunk) {\n            audioQueueRef.current.push(audioChunk);\n            processAudioQueue();\n          }\n        },\n        onerror: (e) => console.error(\"Live error:\", e),\n        onclose: () => console.log(\"Live session closed\"),\n      },\n    });\n    setSession(s);\n\n    // Open mic\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    setMicStream(stream);\n\n    // Capture mic frames and send (muted while model speaks)\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    const src = ctx.createMediaStreamSource(stream);\n    const proc = ctx.createScriptProcessor(4096, 1, 1);\n    src.connect(proc);\n    proc.connect(ctx.destination);\n\n    proc.onaudioprocess = (e) => {\n      if (isModelSpeakingRef.current) return; // mute mic during model speech\n      const inBuf = e.inputBuffer.getChannelData(0);\n      const ds = downsampleTo16k(inBuf, ctx.sampleRate);\n      const pcm16 = floatTo16BitPCM(ds);\n      const mime = \"audio/pcm;rate=16000\";\n      s.sendRealtimeInput({\n        audio: { data: arrayBufferToBase64(pcm16.buffer), mimeType: mime },\n      });\n    };\n  };\n\n  const stopLive = async () => {\n    if (micStream) {\n      micStream.getTracks().forEach((t) => t.stop());\n      setMicStream(null);\n    }\n    if (session) {\n      try {\n        await session.close?.();\n      } catch {}\n      setSession(null);\n    }\n    if (audioCtx) {\n      try {\n        await audioCtx.close();\n      } catch {}\n      setAudioCtx(null);\n    }\n    // Keep history across sessions; clear only audio state\n    audioQueueRef.current = [];\n    isModelSpeakingRef.current = false;\n    setIsModelSpeaking(false);\n  };\n\n  const sendText = async (text) => {\n    if (!session || !text?.trim()) return;\n    // Show userâ€™s text in the history\n    pushHistory(\"user\", text);\n    session.sendClientContent({\n      text,\n      turnComplete: true,\n    });\n  };\n\n  return (\n    <div\n      className=\"app\"\n      style={{\n        padding: 16,\n        paddingBottom: 220, // make space for the fixed history bar\n        fontFamily: \"system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif\",\n      }}\n    >\n      <h2>Talking AI Avatar</h2>\n\n      <Lottie\n        lottieRef={avatarRef}\n        animationData={talkingAvatar}\n        loop\n        autoplay={false}\n        style={{ height: 300 }}\n      />\n\n      <div style={{ display: \"flex\", gap: 8, marginTop: 12 }}>\n        {!session ? (\n          <button onClick={startLive}>Start Live</button>\n        ) : (\n          <>\n            <button onClick={() => sendText(\"Tell me a short story.\")}>Send Text Turn</button>\n            <button onClick={stopLive}>Stop</button>\n          </>\n        )}\n      </div>\n\n      <p style={{ opacity: 0.7, marginTop: 8 }}>\n        {session\n          ? isModelSpeaking\n            ? \"Model is speaking...\"\n            : \"Live connected. Speak into your mic.\"\n          : \"Click Start Live and give mic permission.\"}\n      </p>\n\n      {/* ---- NEW: Fixed bottom, scrollable history panel ---- */}\n      <div\n        style={{\n          position: \"fixed\",\n          left: 0,\n          right: 0,\n          bottom: 0,\n          background: \"rgba(20,20,20,0.9)\",\n          borderTop: \"1px solid #333\",\n          padding: 12,\n          maxHeight: 200,\n          overflowY: \"auto\",\n        }}\n      >\n        <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 6 }}>History</div>\n        {history.map((m, i) => (\n          <div\n            key={i}\n            style={{\n              display: \"flex\",\n              gap: 8,\n              marginBottom: 6,\n              alignItems: \"flex-start\",\n            }}\n          >\n            <div\n              style={{\n                fontSize: 11,\n                opacity: 0.7,\n                minWidth: 36,\n                textTransform: \"uppercase\",\n              }}\n            >\n              {m.role === \"ai\" ? \"AI\" : \"You\"}\n            </div>\n            <div\n              style={{\n                background: m.role === \"ai\" ? \"#1e1e1e\" : \"#262626\",\n                border: \"1px solid #333\",\n                padding: \"8px 10px\",\n                borderRadius: 8,\n                maxWidth: 800,\n                whiteSpace: \"pre-wrap\",\n                wordBreak: \"break-word\",\n                lineHeight: 1.35,\n              }}\n            >\n              {m.text}\n            </div>\n          </div>\n        ))}\n        <div ref={historyEndRef} />\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}