{"ast":null,"code":"var _jsxFileName = \"/private/var/www/html/dev-app/live-stream-talk/react-front/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport Lottie from \"lottie-react\";\nimport talkingAvatar from \"./talking-avatar.json\";\nimport { GoogleGenAI } from \"@google/genai\";\n\n// Correct Live model id for v1alpha\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MODEL = \"gemini-1.5-flash-latest\";\nconst OUTPUT_SAMPLE_RATE = 24000;\nexport default function App() {\n  _s();\n  const avatarRef = useRef(null);\n\n  // State for the Live session, audio, and history\n  const [session, setSession] = useState(null);\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [micStream, setMicStream] = useState(null);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [history, setHistory] = useState([]); // <-- NEW: State for conversation history\n\n  // Refs for audio queue\n  const audioQueue = useRef([]);\n  const isPlaybackActive = useRef(false);\n\n  // Start/stop avatar based on speaking flag\n  useEffect(() => {\n    if (!avatarRef.current) return;\n    if (isSpeaking) avatarRef.current.play();else avatarRef.current.stop();\n  }, [isSpeaking]);\n\n  // ---------- Audio Conversion Helpers (Unchanged) ----------\n  function floatTo16BitPCM(float32) {\n    const out = new Int16Array(float32.length);\n    for (let i = 0; i < float32.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32[i]));\n      out[i] = s < 0 ? s * 0x8000 : s * 0x7fff;\n    }\n    return out;\n  }\n  function downsampleTo16k(float32, inRate) {\n    const outRate = 16000;\n    if (inRate === outRate) return float32;\n    const ratio = inRate / outRate;\n    const newLen = Math.floor(float32.length / ratio);\n    const out = new Float32Array(newLen);\n    let pos = 0;\n    for (let i = 0; i < newLen; i++, pos += ratio) {\n      out[i] = float32[Math.floor(pos)];\n    }\n    return out;\n  }\n  function arrayBufferToBase64(ab) {\n    const bytes = new Uint8Array(ab);\n    let bin = \"\";\n    for (let i = 0; i < bytes.length; i++) bin += String.fromCharCode(bytes[i]);\n    return btoa(bin);\n  }\n  function base64ToInt16(b64) {\n    const bytes = Uint8Array.from(atob(b64), c => c.charCodeAt(0));\n    return new Int16Array(bytes.buffer);\n  }\n\n  // ---------- Queued Playback Logic (Unchanged from previous fix) ----------\n  const processQueue = useCallback(() => {\n    if (audioQueue.current.length === 0 || isPlaybackActive.current) return;\n    isPlaybackActive.current = true;\n    setIsSpeaking(true);\n    const int16le = audioQueue.current.shift();\n    const ctx = audioCtx || new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: OUTPUT_SAMPLE_RATE\n    });\n    if (!audioCtx) setAudioCtx(ctx);\n    const f32 = new Float32Array(int16le.length);\n    for (let i = 0; i < int16le.length; i++) f32[i] = int16le[i] / 0x8000;\n    const buffer = ctx.createBuffer(1, f32.length, OUTPUT_SAMPLE_RATE);\n    buffer.copyToChannel(f32, 0, 0);\n    const src = ctx.createBufferSource();\n    src.buffer = buffer;\n    src.connect(ctx.destination);\n    src.onended = () => {\n      isPlaybackActive.current = false;\n      if (audioQueue.current.length === 0) setIsSpeaking(false);\n      processQueue();\n    };\n    src.start();\n  }, [audioCtx]);\n\n  // ---------- NEW: Helper to add entries to the history log ----------\n  const addToHistory = (role, text) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setHistory(prev => [...prev, {\n      role,\n      text,\n      timestamp\n    }]);\n  };\n\n  // ---------- Live Session Start / Stop ----------\n  const startLive = async () => {\n    audioQueue.current = [];\n    isPlaybackActive.current = false;\n    setIsSpeaking(false);\n    setHistory([]); // Clear history on start\n\n    // 1) Get ephemeral token\n    const {\n      token\n    } = await fetch(\"http://localhost:8787/api/ephemeral-token\").then(r => r.json());\n    const ephemeralKey = typeof token === \"string\" ? token : token === null || token === void 0 ? void 0 : token.name;\n    const ai = new GoogleGenAI({\n      apiKey: ephemeralKey,\n      httpOptions: {\n        apiVersion: \"v1alpha\"\n      }\n    });\n\n    // 2) *** FIX: Use ai.live.connect as in your original code ***\n    const s = await ai.live.connect({\n      model: MODEL,\n      config: {\n        responseModalities: [\"AUDIO\", \"TEXT\"],\n        // Request TEXT for transcripts\n        speechConfig: {\n          languageCode: \"hi-IN\",\n          // Example language\n          voiceConfig: {\n            prebuiltVoiceConfig: {\n              voiceName: \"Kore\"\n            }\n          }\n        }\n      },\n      callbacks: {\n        onmessage: msg => {\n          var _msg$speechUpdate, _msg$speechUpdate2, _msg$speechUpdate3;\n          // Handle audio playback via queue\n          const base64Audio = (msg === null || msg === void 0 ? void 0 : (_msg$speechUpdate = msg.speechUpdate) === null || _msg$speechUpdate === void 0 ? void 0 : _msg$speechUpdate.audio) || (msg === null || msg === void 0 ? void 0 : msg.data) || null;\n          if (typeof base64Audio === \"string\") {\n            audioQueue.current.push(base64ToInt16(base64Audio));\n            processQueue();\n          } else if (base64Audio instanceof ArrayBuffer) {\n            audioQueue.current.push(new Int16Array(base64Audio));\n            processQueue();\n          }\n\n          // *** NEW: Handle transcript for history log ***\n          const transcript = msg === null || msg === void 0 ? void 0 : (_msg$speechUpdate2 = msg.speechUpdate) === null || _msg$speechUpdate2 === void 0 ? void 0 : _msg$speechUpdate2.transcript;\n          const isFinal = msg === null || msg === void 0 ? void 0 : (_msg$speechUpdate3 = msg.speechUpdate) === null || _msg$speechUpdate3 === void 0 ? void 0 : _msg$speechUpdate3.isFinal;\n          if (transcript && isFinal) {\n            addToHistory(\"Human\", transcript);\n          }\n        },\n        onerror: e => console.error(\"Live error:\", e),\n        onclose: () => console.log(\"Live session closed\")\n      }\n    });\n    setSession(s);\n\n    // 3) Open mic\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    setMicStream(stream);\n\n    // 4) Send mic data\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    const src = ctx.createMediaStreamSource(stream);\n    const proc = ctx.createScriptProcessor(4096, 1, 1);\n    src.connect(proc);\n    proc.connect(ctx.destination);\n    proc.onaudioprocess = e => {\n      const inBuf = e.inputBuffer.getChannelData(0);\n      const ds = downsampleTo16k(inBuf, ctx.sampleRate);\n      const pcm16 = floatTo16BitPCM(ds);\n      const mime = \"audio/pcm;rate=16000\";\n      s.sendRealtimeInput({\n        audio: {\n          data: arrayBufferToBase64(pcm16.buffer),\n          mimeType: mime\n        }\n      });\n    };\n  };\n  const stopLive = async () => {\n    var _session$close;\n    audioQueue.current = [];\n    isPlaybackActive.current = false;\n    if (micStream) micStream.getTracks().forEach(t => t.stop());\n    if (session) await ((_session$close = session.close) === null || _session$close === void 0 ? void 0 : _session$close.call(session).catch(() => {}));\n    if (audioCtx) await audioCtx.close().catch(() => {});\n    setMicStream(null);\n    setSession(null);\n    setAudioCtx(null);\n    setIsSpeaking(false);\n  };\n  const sendText = async text => {\n    if (!session) return;\n    // *** NEW: Add AI's text to history when sent ***\n    addToHistory(\"AI\", text);\n    session.sendClientContent({\n      text,\n      turnComplete: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Talking AI Avatar (Gemini Live)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Lottie, {\n          lottieRef: avatarRef,\n          animationData: talkingAvatar,\n          loop: true,\n          autoplay: false,\n          style: {\n            height: 300\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 8,\n            marginTop: 12\n          },\n          children: !session ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startLive,\n            children: \"Start Live\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => sendText(\"नमस्ते! आप कैसे हैं?\"),\n              children: \"Send Text Turn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: stopLive,\n              children: \"Stop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            opacity: 0.7,\n            marginTop: 8\n          },\n          children: session ? isSpeaking ? \"Model is speaking...\" : \"Live connected. Speak into your mic.\" : \"Click Start Live and give mic permission.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-log\",\n        style: {\n          flex: 1,\n          border: '1px solid #ccc',\n          padding: '10px',\n          height: '400px',\n          overflowY: 'auto',\n          backgroundColor: '#f9f9f9'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Conversation Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '8px',\n            textAlign: entry.role === 'AI' ? 'left' : 'right'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '0.8em',\n              color: '#555'\n            },\n            children: [entry.role, \" at \", entry.timestamp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'inline-block',\n              padding: '8px 12px',\n              borderRadius: '10px',\n              backgroundColor: entry.role === 'AI' ? '#e1f5fe' : '#dcedc8'\n            },\n            children: entry.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KNxC0CBuJeMg9UbfVSFIPKMBLL0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","Lottie","talkingAvatar","GoogleGenAI","jsxDEV","_jsxDEV","Fragment","_Fragment","MODEL","OUTPUT_SAMPLE_RATE","App","_s","avatarRef","session","setSession","audioCtx","setAudioCtx","micStream","setMicStream","isSpeaking","setIsSpeaking","history","setHistory","audioQueue","isPlaybackActive","current","play","stop","floatTo16BitPCM","float32","out","Int16Array","length","i","s","Math","max","min","downsampleTo16k","inRate","outRate","ratio","newLen","floor","Float32Array","pos","arrayBufferToBase64","ab","bytes","Uint8Array","bin","String","fromCharCode","btoa","base64ToInt16","b64","from","atob","c","charCodeAt","buffer","processQueue","int16le","shift","ctx","window","AudioContext","webkitAudioContext","sampleRate","f32","createBuffer","copyToChannel","src","createBufferSource","connect","destination","onended","start","addToHistory","role","text","timestamp","Date","toLocaleTimeString","prev","startLive","token","fetch","then","r","json","ephemeralKey","name","ai","apiKey","httpOptions","apiVersion","live","model","config","responseModalities","speechConfig","languageCode","voiceConfig","prebuiltVoiceConfig","voiceName","callbacks","onmessage","msg","_msg$speechUpdate","_msg$speechUpdate2","_msg$speechUpdate3","base64Audio","speechUpdate","audio","data","push","ArrayBuffer","transcript","isFinal","onerror","e","console","error","onclose","log","stream","navigator","mediaDevices","getUserMedia","createMediaStreamSource","proc","createScriptProcessor","onaudioprocess","inBuf","inputBuffer","getChannelData","ds","pcm16","mime","sendRealtimeInput","mimeType","stopLive","_session$close","getTracks","forEach","t","close","call","catch","sendText","sendClientContent","turnComplete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","flex","lottieRef","animationData","loop","autoplay","height","marginTop","onClick","opacity","border","padding","overflowY","backgroundColor","map","entry","index","marginBottom","textAlign","fontSize","color","borderRadius","_c","$RefreshReg$"],"sources":["/private/var/www/html/dev-app/live-stream-talk/react-front/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport Lottie from \"lottie-react\";\nimport talkingAvatar from \"./talking-avatar.json\";\nimport { GoogleGenAI } from \"@google/genai\";\n\n// Correct Live model id for v1alpha\nconst MODEL = \"gemini-1.5-flash-latest\";\nconst OUTPUT_SAMPLE_RATE = 24000;\n\nexport default function App() {\n  const avatarRef = useRef(null);\n\n  // State for the Live session, audio, and history\n  const [session, setSession] = useState(null);\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [micStream, setMicStream] = useState(null);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [history, setHistory] = useState([]); // <-- NEW: State for conversation history\n\n  // Refs for audio queue\n  const audioQueue = useRef([]);\n  const isPlaybackActive = useRef(false);\n\n  // Start/stop avatar based on speaking flag\n  useEffect(() => {\n    if (!avatarRef.current) return;\n    if (isSpeaking) avatarRef.current.play();\n    else avatarRef.current.stop();\n  }, [isSpeaking]);\n\n  // ---------- Audio Conversion Helpers (Unchanged) ----------\n  function floatTo16BitPCM(float32) {\n    const out = new Int16Array(float32.length);\n    for (let i = 0; i < float32.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32[i]));\n      out[i] = s < 0 ? s * 0x8000 : s * 0x7fff;\n    }\n    return out;\n  }\n  function downsampleTo16k(float32, inRate) {\n    const outRate = 16000;\n    if (inRate === outRate) return float32;\n    const ratio = inRate / outRate;\n    const newLen = Math.floor(float32.length / ratio);\n    const out = new Float32Array(newLen);\n    let pos = 0;\n    for (let i = 0; i < newLen; i++, pos += ratio) {\n      out[i] = float32[Math.floor(pos)];\n    }\n    return out;\n  }\n  function arrayBufferToBase64(ab) {\n    const bytes = new Uint8Array(ab);\n    let bin = \"\";\n    for (let i = 0; i < bytes.length; i++) bin += String.fromCharCode(bytes[i]);\n    return btoa(bin);\n  }\n  function base64ToInt16(b64) {\n    const bytes = Uint8Array.from(atob(b64), (c) => c.charCodeAt(0));\n    return new Int16Array(bytes.buffer);\n  }\n\n  // ---------- Queued Playback Logic (Unchanged from previous fix) ----------\n  const processQueue = useCallback(() => {\n    if (audioQueue.current.length === 0 || isPlaybackActive.current) return;\n    isPlaybackActive.current = true;\n    setIsSpeaking(true);\n    const int16le = audioQueue.current.shift();\n    const ctx = audioCtx || new (window.AudioContext || window.webkitAudioContext)({ sampleRate: OUTPUT_SAMPLE_RATE });\n    if (!audioCtx) setAudioCtx(ctx);\n    const f32 = new Float32Array(int16le.length);\n    for (let i = 0; i < int16le.length; i++) f32[i] = int16le[i] / 0x8000;\n    const buffer = ctx.createBuffer(1, f32.length, OUTPUT_SAMPLE_RATE);\n    buffer.copyToChannel(f32, 0, 0);\n    const src = ctx.createBufferSource();\n    src.buffer = buffer;\n    src.connect(ctx.destination);\n    src.onended = () => {\n      isPlaybackActive.current = false;\n      if (audioQueue.current.length === 0) setIsSpeaking(false);\n      processQueue();\n    };\n    src.start();\n  }, [audioCtx]);\n\n  // ---------- NEW: Helper to add entries to the history log ----------\n  const addToHistory = (role, text) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setHistory(prev => [...prev, { role, text, timestamp }]);\n  };\n\n\n  // ---------- Live Session Start / Stop ----------\n  const startLive = async () => {\n    audioQueue.current = [];\n    isPlaybackActive.current = false;\n    setIsSpeaking(false);\n    setHistory([]); // Clear history on start\n\n    // 1) Get ephemeral token\n    const { token } = await fetch(\"http://localhost:8787/api/ephemeral-token\").then((r) => r.json());\n    const ephemeralKey = typeof token === \"string\" ? token : token?.name;\n\n    const ai = new GoogleGenAI({\n      apiKey: ephemeralKey,\n      httpOptions: { apiVersion: \"v1alpha\" },\n    });\n\n    // 2) *** FIX: Use ai.live.connect as in your original code ***\n    const s = await ai.live.connect({\n      model: MODEL,\n      config: {\n        responseModalities: [\"AUDIO\", \"TEXT\"], // Request TEXT for transcripts\n        speechConfig: {\n          languageCode: \"hi-IN\", // Example language\n          voiceConfig: { prebuiltVoiceConfig: { voiceName: \"Kore\" } },\n        },\n      },\n      callbacks: {\n        onmessage: (msg) => {\n          // Handle audio playback via queue\n          const base64Audio = msg?.speechUpdate?.audio || msg?.data || null;\n          if (typeof base64Audio === \"string\") {\n            audioQueue.current.push(base64ToInt16(base64Audio));\n            processQueue();\n          } else if (base64Audio instanceof ArrayBuffer) {\n            audioQueue.current.push(new Int16Array(base64Audio));\n            processQueue();\n          }\n\n          // *** NEW: Handle transcript for history log ***\n          const transcript = msg?.speechUpdate?.transcript;\n          const isFinal = msg?.speechUpdate?.isFinal;\n          if (transcript && isFinal) {\n            addToHistory(\"Human\", transcript);\n          }\n        },\n        onerror: (e) => console.error(\"Live error:\", e),\n        onclose: () => console.log(\"Live session closed\"),\n      },\n    });\n    setSession(s);\n\n    // 3) Open mic\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    setMicStream(stream);\n\n    // 4) Send mic data\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    const src = ctx.createMediaStreamSource(stream);\n    const proc = ctx.createScriptProcessor(4096, 1, 1);\n    src.connect(proc);\n    proc.connect(ctx.destination);\n    proc.onaudioprocess = (e) => {\n      const inBuf = e.inputBuffer.getChannelData(0);\n      const ds = downsampleTo16k(inBuf, ctx.sampleRate);\n      const pcm16 = floatTo16BitPCM(ds);\n      const mime = \"audio/pcm;rate=16000\";\n      s.sendRealtimeInput({\n        audio: { data: arrayBufferToBase64(pcm16.buffer), mimeType: mime },\n      });\n    };\n  };\n\n  const stopLive = async () => {\n    audioQueue.current = [];\n    isPlaybackActive.current = false;\n    if (micStream) micStream.getTracks().forEach((t) => t.stop());\n    if (session) await session.close?.().catch(() => {});\n    if (audioCtx) await audioCtx.close().catch(() => {});\n    setMicStream(null);\n    setSession(null);\n    setAudioCtx(null);\n    setIsSpeaking(false);\n  };\n\n  const sendText = async (text) => {\n    if (!session) return;\n    // *** NEW: Add AI's text to history when sent ***\n    addToHistory(\"AI\", text);\n    session.sendClientContent({ text, turnComplete: true });\n  };\n\n  return (\n    <div className=\"app\">\n      <h2>Talking AI Avatar (Gemini Live)</h2>\n      <div style={{ display: 'flex', gap: '20px' }}>\n        <div style={{ flex: 1 }}>\n          <Lottie\n            lottieRef={avatarRef}\n            animationData={talkingAvatar}\n            loop\n            autoplay={false}\n            style={{ height: 300 }}\n          />\n          <div style={{ display: \"flex\", gap: 8, marginTop: 12 }}>\n            {!session ? (\n              <button onClick={startLive}>Start Live</button>\n            ) : (\n              <>\n                <button onClick={() => sendText(\"नमस्ते! आप कैसे हैं?\")}>Send Text Turn</button>\n                <button onClick={stopLive}>Stop</button>\n              </>\n            )}\n          </div>\n          <p style={{ opacity: 0.7, marginTop: 8 }}>\n            {session ? (isSpeaking ? \"Model is speaking...\" : \"Live connected. Speak into your mic.\") : \"Click Start Live and give mic permission.\"}\n          </p>\n        </div>\n\n        {/* --- NEW: History Log Display --- */}\n        <div className=\"history-log\" style={{ flex: 1, border: '1px solid #ccc', padding: '10px', height: '400px', overflowY: 'auto', backgroundColor: '#f9f9f9' }}>\n          <h3>Conversation Log</h3>\n          {history.map((entry, index) => (\n            <div key={index} style={{ marginBottom: '8px', textAlign: entry.role === 'AI' ? 'left' : 'right' }}>\n              <div style={{ fontSize: '0.8em', color: '#555' }}>\n                {entry.role} at {entry.timestamp}\n              </div>\n              <div style={{\n                display: 'inline-block',\n                padding: '8px 12px',\n                borderRadius: '10px',\n                backgroundColor: entry.role === 'AI' ? '#e1f5fe' : '#dcedc8',\n              }}>\n                {entry.text}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}